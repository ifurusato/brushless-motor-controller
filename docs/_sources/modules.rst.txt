
========
Overview
========

This project uses Python and MicroPython for control of up to four DC brushless motors.
It is designed for use with a Raspberry Pi but could be adapted to any hardware with
similar capabilities.

The DFRobot brushless motors require a Pulse-Width Modified (PWM) signal to control
their speed, in an inverted mode: when fed a 100% duty cycle the motor is stopped,
a 50% duty cycle is half speed, a 0% duty cycle is full speed.

Because the Raspberry Pi uses a user-space OS, rather than an RTOS, its software PWM is
not reliable. The Pi has only two channels of hardware PWM. Therefore, if you are trying
to control more than two motors you'll need either an external PWM board or connecting
to a microcontroller over a UART. This code supports either an RP2040 or an STM32 (i.e.,
the STM32H562, though it could with some pin configuration changes be used with others).


=======
Modules
=======

.. note::

   The following modules are automatically documented using Sphinx.




.. automodule:: core.component
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: core.config_loader
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: core.globals
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: has, get, put, init

.. automodule:: core.logger
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: core.util
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.brushless_motor
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.controller_channel
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.digital_pot_async
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.payload
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.pwm_controller
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.pwm_controller_impl
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.rotary_encoder
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.slew_limiter
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.stm32_pwm_controller
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.tlc59711
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.tlc59711_pwm_controller
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: hardware.value_provider
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: stop_motor
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: temp.source.conf
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: uart.async_uart_manager
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: uart.crc8_table
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: uart.payload
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: uart.sync_uart_manager
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init

.. automodule:: uart.uart_master
    :members:
    :undoc-members:
    :show-inheritance:
    :exclude-members: main, init
